// <auto-generated />
using System;
using GS.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GS.API.Migrations
{
    [DbContext(typeof(Postgre_Context))]
    partial class Postgre_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("doce")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("GS.API.Models.Clientes", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClienteId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CliCodEndereco")
                        .HasColumnType("integer")
                        .HasColumnName("CliCodEndereco");

                    b.Property<string>("ClienteCelular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ClienteCelular");

                    b.Property<DateTime?>("ClienteDataCad")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ClienteDataCad");

                    b.Property<DateTime?>("ClienteDataNasc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ClienteDataNasc");

                    b.Property<string>("ClienteNome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ClienteNome");

                    b.Property<bool?>("ClienteStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("ClienteStatus");

                    b.Property<decimal?>("ClienteTotalCompras")
                        .HasColumnType("money")
                        .HasColumnName("ClienteTotalCompras");

                    b.HasKey("ClienteId")
                        .HasName("PK_Clientes");

                    b.HasIndex("CliCodEndereco");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("GS.API.Models.Compras", b =>
                {
                    b.Property<int>("CompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CompraId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CompraCodFor")
                        .HasColumnType("integer")
                        .HasColumnName("CompraCodFor");

                    b.Property<int?>("CompraCodLocal")
                        .HasColumnType("integer")
                        .HasColumnName("CompraCodLocal");

                    b.Property<DateTime?>("CompraData")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("CompraData");

                    b.Property<string>("CompraStatus")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("CompraStatus");

                    b.Property<decimal?>("CompraValorFrete")
                        .HasColumnType("money")
                        .HasColumnName("CompraValorFrete");

                    b.Property<decimal?>("CompraValorItens")
                        .HasColumnType("money")
                        .HasColumnName("CompraValorItens");

                    b.Property<decimal?>("CompraValorTotal")
                        .HasColumnType("money")
                        .HasColumnName("CompraValorTotal");

                    b.HasKey("CompraId")
                        .HasName("PK_Compras");

                    b.HasIndex("CompraCodFor");

                    b.HasIndex("CompraCodLocal");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("GS.API.Models.ComprasItens", b =>
                {
                    b.Property<int>("CompraItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CompraItemId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CodCompra")
                        .HasColumnType("integer")
                        .HasColumnName("CodCompra");

                    b.Property<int?>("CodProduto")
                        .HasColumnType("integer")
                        .HasColumnName("CodProduto");

                    b.Property<decimal?>("QntItemCompra")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("QntItemCompra");

                    b.Property<decimal?>("ValTotItemCompra")
                        .HasColumnType("money")
                        .HasColumnName("ValTotItemCompra");

                    b.Property<decimal?>("ValUniItemCompra")
                        .HasColumnType("money")
                        .HasColumnName("ValUniItemCompra");

                    b.HasKey("CompraItemId")
                        .HasName("PK_ComprasItens");

                    b.HasIndex("CodCompra");

                    b.HasIndex("CodProduto");

                    b.ToTable("ComprasItens");
                });

            modelBuilder.Entity("GS.API.Models.Enderecos", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EnderecoId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("EnderecoBairro")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoBairro");

                    b.Property<string>("EnderecoCEP")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoCEP");

                    b.Property<string>("EnderecoCidade")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoCidade");

                    b.Property<string>("EnderecoComplemento")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoComplemento");

                    b.Property<string>("EnderecoNum")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoNum");

                    b.Property<string>("EnderecoRua")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoRua");

                    b.Property<string>("EnderecoTipo")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoTipo");

                    b.Property<string>("EnderecoUF")
                        .HasMaxLength(2)
                        .HasColumnType("varchar")
                        .HasColumnName("EnderecoUF");

                    b.HasKey("EnderecoId")
                        .HasName("PK_Enderecos");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("GS.API.Models.Financeiro", b =>
                {
                    b.Property<int>("FinanceiroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FinanceiroId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CodCliForOrigem")
                        .HasColumnType("integer")
                        .HasColumnName("CodCliForOrigem");

                    b.Property<int?>("FinanCodOrigem")
                        .HasColumnType("integer")
                        .HasColumnName("FinanCodOrigem");

                    b.Property<DateTime?>("FinanDataDig")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FinanDataDig");

                    b.Property<DateTime?>("FinanDataUltPag")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FinanDataUltPag");

                    b.Property<string>("FinanMov")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("FinanMov");

                    b.Property<string>("FinanStatus")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("FinanStatus");

                    b.Property<decimal?>("FinanValorPago")
                        .HasColumnType("money")
                        .HasColumnName("FinanValorPago");

                    b.Property<decimal?>("FinanValorSaldo")
                        .HasColumnType("money")
                        .HasColumnName("FinanValorSaldo");

                    b.Property<decimal?>("FinanValorTotal")
                        .HasColumnType("money")
                        .HasColumnName("FinanValorTotal");

                    b.Property<DateTime?>("FinanVencimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FinanVencimento");

                    b.HasKey("FinanceiroId")
                        .HasName("PK_Financeiro");

                    b.ToTable("Financeiro");
                });

            modelBuilder.Entity("GS.API.Models.FinanceiroPag", b =>
                {
                    b.Property<int>("FinanPagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FinanPagId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("FinanCod")
                        .HasColumnType("integer")
                        .HasColumnName("FinanCod");

                    b.Property<DateTime>("FinanDataPag")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("FinanDataPag");

                    b.Property<decimal>("FinanValorPag")
                        .HasColumnType("money")
                        .HasColumnName("FinanValorPag");

                    b.HasKey("FinanPagId")
                        .HasName("PK_FinanceiroPag");

                    b.HasIndex("FinanCod");

                    b.ToTable("FinanceiroPag");
                });

            modelBuilder.Entity("GS.API.Models.Fornecedores", b =>
                {
                    b.Property<int>("FornecedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FornecedorId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ForCodEndereco")
                        .HasColumnType("integer")
                        .HasColumnName("ForCodEndereco");

                    b.Property<string>("FornecedorCNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("FornecedorCNPJ");

                    b.Property<string>("FornecedorNome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FornecedorNome");

                    b.HasKey("FornecedorId")
                        .HasName("PK_Fornecedores");

                    b.HasIndex("ForCodEndereco");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("GS.API.Models.Grupos", b =>
                {
                    b.Property<int>("GrupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GrupoId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("GrupoNome")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GrupoNome");

                    b.Property<decimal?>("GrupoPreco")
                        .HasColumnType("money")
                        .HasColumnName("GrupoPreco");

                    b.HasKey("GrupoId")
                        .HasName("PK_Grupos");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("GS.API.Models.Localizacoes", b =>
                {
                    b.Property<int>("LocalizacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LocalizacaoId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("LocalizacaoNome")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("LocalizacaoNome");

                    b.HasKey("LocalizacaoId")
                        .HasName("PK_Localizacoes");

                    b.ToTable("Localizacoes");
                });

            modelBuilder.Entity("GS.API.Models.Produtos", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProdutoId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ProCodGrupo")
                        .HasColumnType("integer")
                        .HasColumnName("ProCodGrupo");

                    b.Property<int?>("ProCodUni")
                        .HasColumnType("integer")
                        .HasColumnName("ProCodUni");

                    b.Property<decimal?>("ProCustoAtual")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("ProCustoAtual");

                    b.Property<decimal?>("ProPrecoAtual")
                        .HasColumnType("money")
                        .HasColumnName("ProPrecoAtual");

                    b.Property<bool?>("ProPrecoGrupo")
                        .HasColumnType("boolean")
                        .HasColumnName("ProPrecoGrupo");

                    b.Property<bool?>("ProdutoAtivo")
                        .HasColumnType("boolean")
                        .HasColumnName("ProdutoAtivo");

                    b.Property<string>("ProdutoNome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ProdutoNome");

                    b.Property<string>("ProdutoTipo")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("ProdutoTipo");

                    b.HasKey("ProdutoId")
                        .HasName("PK_Produtos");

                    b.HasIndex("ProCodGrupo");

                    b.HasIndex("ProCodUni");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("GS.API.Models.SaldoProdutos", b =>
                {
                    b.Property<int>("SaldoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SaldoId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("SaldoCodLocal")
                        .HasColumnType("integer")
                        .HasColumnName("SaldoCodLocal");

                    b.Property<int>("SaldoCodProduto")
                        .HasColumnType("integer")
                        .HasColumnName("SaldoCodProduto");

                    b.Property<decimal>("SaldoEntProduto")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("SaldoEntProduto");

                    b.Property<decimal>("SaldoProduto")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("SaldoProduto");

                    b.Property<decimal>("SaldoSaiProduto")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("SaldoSaiProduto");

                    b.HasKey("SaldoId")
                        .HasName("PK_SaldoProdutos");

                    b.HasIndex("SaldoCodLocal");

                    b.HasIndex("SaldoCodProduto");

                    b.ToTable("SaldoProdutos");
                });

            modelBuilder.Entity("GS.API.Models.Unidades", b =>
                {
                    b.Property<int>("UnidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UnidadeId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("UnidadeNome")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UnidadeNome");

                    b.Property<string>("UnidadeSigla")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("UnidadeSigla");

                    b.HasKey("UnidadeId")
                        .HasName("PK_Unidades");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("GS.API.Models.Vendas", b =>
                {
                    b.Property<int>("VendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("VendaId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("VendaCodCli")
                        .HasColumnType("integer")
                        .HasColumnName("VendaCodCli");

                    b.Property<int?>("VendaCodLocal")
                        .HasColumnType("integer")
                        .HasColumnName("VendaCodLocal");

                    b.Property<int?>("VendaCodVen")
                        .HasColumnType("integer")
                        .HasColumnName("VendaCodVen");

                    b.Property<DateTime?>("VendaData")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("VendaData");

                    b.Property<string>("VendaEndEntrega")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("VendaEndEntrega");

                    b.Property<string>("VendaObservacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar")
                        .HasColumnName("VendaObservacoes");

                    b.Property<string>("VendaStatus")
                        .HasMaxLength(1)
                        .HasColumnType("varchar")
                        .HasColumnName("VendaStatus");

                    b.Property<decimal?>("VendaValorEntrega")
                        .HasColumnType("money")
                        .HasColumnName("VendaValorEntrega");

                    b.Property<decimal?>("VendaValorItens")
                        .HasColumnType("money")
                        .HasColumnName("VendaValorItens");

                    b.Property<decimal?>("VendaValorTotal")
                        .HasColumnType("money")
                        .HasColumnName("VendaValorTotal");

                    b.HasKey("VendaId")
                        .HasName("PK_Vendas");

                    b.HasIndex("VendaCodCli");

                    b.HasIndex("VendaCodLocal");

                    b.HasIndex("VendaCodVen");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("GS.API.Models.VendasItens", b =>
                {
                    b.Property<int>("VendaItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("VendaItemId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CodProduto")
                        .HasColumnType("integer")
                        .HasColumnName("CodProduto");

                    b.Property<int>("CodVenda")
                        .HasColumnType("integer")
                        .HasColumnName("CodVenda");

                    b.Property<decimal?>("QntItemVenda")
                        .HasColumnType("numeric(15,6)")
                        .HasColumnName("QntItemVenda");

                    b.Property<decimal?>("ValDescItemVenda")
                        .HasColumnType("money")
                        .HasColumnName("ValDescItemVenda");

                    b.Property<decimal?>("ValTotItemVenda")
                        .HasColumnType("money")
                        .HasColumnName("ValTotItemVenda");

                    b.Property<decimal?>("ValUniItemVenda")
                        .HasColumnType("money")
                        .HasColumnName("ValUniItemVenda");

                    b.HasKey("VendaItemId")
                        .HasName("PK_VendasItens");

                    b.HasIndex("CodProduto");

                    b.HasIndex("CodVenda");

                    b.ToTable("VendasItens");
                });

            modelBuilder.Entity("GS.API.Models.Vendedores", b =>
                {
                    b.Property<int>("VendedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("VendedorId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("VenCodEndereco")
                        .HasColumnType("integer")
                        .HasColumnName("VenCodEndereco");

                    b.Property<bool?>("VendedorAtivo")
                        .HasColumnType("boolean")
                        .HasColumnName("VendedorAtivo");

                    b.Property<string>("VendedorCelular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("VendedorCelular");

                    b.Property<bool?>("VendedorComissao")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VendedorDataCad")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("VendedorDataCad");

                    b.Property<DateTime?>("VendedorDataNasc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("VendedorDataNasc");

                    b.Property<string>("VendedorNome")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("VendedorNome");

                    b.Property<decimal?>("VendedorTotalVendas")
                        .HasColumnType("money")
                        .HasColumnName("VendedorTotalVendas");

                    b.HasKey("VendedorId")
                        .HasName("PK_Vendedores");

                    b.HasIndex("VenCodEndereco");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("GS.API.Models.Clientes", b =>
                {
                    b.HasOne("GS.API.Models.Enderecos", "Endereco")
                        .WithMany("Cliente")
                        .HasForeignKey("CliCodEndereco")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("GS.API.Models.Compras", b =>
                {
                    b.HasOne("GS.API.Models.Fornecedores", "Fornecedor")
                        .WithMany("Compra")
                        .HasForeignKey("CompraCodFor")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GS.API.Models.Localizacoes", "Local")
                        .WithMany("Compra")
                        .HasForeignKey("CompraCodLocal")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Fornecedor");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("GS.API.Models.ComprasItens", b =>
                {
                    b.HasOne("GS.API.Models.Compras", "Compra")
                        .WithMany("CompraItens")
                        .HasForeignKey("CodCompra")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GS.API.Models.Produtos", "Produto")
                        .WithMany("CompraItens")
                        .HasForeignKey("CodProduto")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Compra");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GS.API.Models.FinanceiroPag", b =>
                {
                    b.HasOne("GS.API.Models.Financeiro", "Finan")
                        .WithMany("FinanPag")
                        .HasForeignKey("FinanCod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Finan");
                });

            modelBuilder.Entity("GS.API.Models.Fornecedores", b =>
                {
                    b.HasOne("GS.API.Models.Enderecos", "Endereco")
                        .WithMany("Fornecedor")
                        .HasForeignKey("ForCodEndereco")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("GS.API.Models.Produtos", b =>
                {
                    b.HasOne("GS.API.Models.Grupos", "Grupo")
                        .WithMany("Produtos")
                        .HasForeignKey("ProCodGrupo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GS.API.Models.Unidades", "Unidade")
                        .WithMany("Produtos")
                        .HasForeignKey("ProCodUni")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Grupo");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("GS.API.Models.SaldoProdutos", b =>
                {
                    b.HasOne("GS.API.Models.Localizacoes", "Local")
                        .WithMany("Saldo")
                        .HasForeignKey("SaldoCodLocal")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GS.API.Models.Produtos", "Produto")
                        .WithMany("Saldo")
                        .HasForeignKey("SaldoCodProduto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GS.API.Models.Vendas", b =>
                {
                    b.HasOne("GS.API.Models.Clientes", "Cliente")
                        .WithMany("Venda")
                        .HasForeignKey("VendaCodCli")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GS.API.Models.Localizacoes", "Local")
                        .WithMany("Venda")
                        .HasForeignKey("VendaCodLocal")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GS.API.Models.Vendedores", "Vendedor")
                        .WithMany("Venda")
                        .HasForeignKey("VendaCodVen")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cliente");

                    b.Navigation("Local");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GS.API.Models.VendasItens", b =>
                {
                    b.HasOne("GS.API.Models.Produtos", "Produto")
                        .WithMany("VendaItens")
                        .HasForeignKey("CodProduto")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GS.API.Models.Vendas", "Venda")
                        .WithMany("VendaItens")
                        .HasForeignKey("CodVenda")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("GS.API.Models.Vendedores", b =>
                {
                    b.HasOne("GS.API.Models.Enderecos", "Endereco")
                        .WithMany("Vendedor")
                        .HasForeignKey("VenCodEndereco")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("GS.API.Models.Clientes", b =>
                {
                    b.Navigation("Venda");
                });

            modelBuilder.Entity("GS.API.Models.Compras", b =>
                {
                    b.Navigation("CompraItens");
                });

            modelBuilder.Entity("GS.API.Models.Enderecos", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Fornecedor");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("GS.API.Models.Financeiro", b =>
                {
                    b.Navigation("FinanPag");
                });

            modelBuilder.Entity("GS.API.Models.Fornecedores", b =>
                {
                    b.Navigation("Compra");
                });

            modelBuilder.Entity("GS.API.Models.Grupos", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GS.API.Models.Localizacoes", b =>
                {
                    b.Navigation("Compra");

                    b.Navigation("Saldo");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("GS.API.Models.Produtos", b =>
                {
                    b.Navigation("CompraItens");

                    b.Navigation("Saldo");

                    b.Navigation("VendaItens");
                });

            modelBuilder.Entity("GS.API.Models.Unidades", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GS.API.Models.Vendas", b =>
                {
                    b.Navigation("VendaItens");
                });

            modelBuilder.Entity("GS.API.Models.Vendedores", b =>
                {
                    b.Navigation("Venda");
                });
#pragma warning restore 612, 618
        }
    }
}
